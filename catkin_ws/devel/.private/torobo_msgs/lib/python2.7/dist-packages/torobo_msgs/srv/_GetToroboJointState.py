# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from torobo_msgs/GetToroboJointStateRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetToroboJointStateRequest(genpy.Message):
  _md5sum = "871c8bc8e290d38ba0b734d07fbebbf8"
  _type = "torobo_msgs/GetToroboJointStateRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string controllerName
"""
  __slots__ = ['controllerName']
  _slot_types = ['string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       controllerName

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetToroboJointStateRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.controllerName is None:
        self.controllerName = ''
    else:
      self.controllerName = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.controllerName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.controllerName = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.controllerName = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.controllerName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.controllerName = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.controllerName = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from torobo_msgs/GetToroboJointStateResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg
import torobo_msgs.msg

class GetToroboJointStateResponse(genpy.Message):
  _md5sum = "2f0dead6332ebd57024a39d22134c85d"
  _type = "torobo_msgs/GetToroboJointStateResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """torobo_msgs/ToroboJointState toroboJointState

================================================================================
MSG: torobo_msgs/ToroboJointState
Header header

uint64 timeStamp
uint64 hostTimeStamp
string[] name
uint32[] type
uint32[] comStatus
uint32[] systemMode
uint32[] ctrlMode
uint64[] errorWarningStatus
uint32[] trjStatus
uint32[] trjViaRemain
float64[] refCurrent
float64[] refPosition
float64[] refVelocity
float64[] refAcceleration
float64[] refEffort
float64[] current
float64[] position
float64[] velocity
float64[] outConvInVelocity
float64[] acceleration
float64[] outConvInAcceleration
float64[] effort
float64[] temperature
float64[] general_0
float64[] general_1
float64[] general_2
float64[] general_3

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['toroboJointState']
  _slot_types = ['torobo_msgs/ToroboJointState']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       toroboJointState

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetToroboJointStateResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.toroboJointState is None:
        self.toroboJointState = torobo_msgs.msg.ToroboJointState()
    else:
      self.toroboJointState = torobo_msgs.msg.ToroboJointState()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.toroboJointState.header.seq, _x.toroboJointState.header.stamp.secs, _x.toroboJointState.header.stamp.nsecs))
      _x = self.toroboJointState.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.toroboJointState.timeStamp, _x.toroboJointState.hostTimeStamp))
      length = len(self.toroboJointState.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.toroboJointState.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.toroboJointState.type)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.toroboJointState.type))
      length = len(self.toroboJointState.comStatus)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.toroboJointState.comStatus))
      length = len(self.toroboJointState.systemMode)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.toroboJointState.systemMode))
      length = len(self.toroboJointState.ctrlMode)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.toroboJointState.ctrlMode))
      length = len(self.toroboJointState.errorWarningStatus)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.Struct(pattern).pack(*self.toroboJointState.errorWarningStatus))
      length = len(self.toroboJointState.trjStatus)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.toroboJointState.trjStatus))
      length = len(self.toroboJointState.trjViaRemain)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.toroboJointState.trjViaRemain))
      length = len(self.toroboJointState.refCurrent)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.toroboJointState.refCurrent))
      length = len(self.toroboJointState.refPosition)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.toroboJointState.refPosition))
      length = len(self.toroboJointState.refVelocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.toroboJointState.refVelocity))
      length = len(self.toroboJointState.refAcceleration)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.toroboJointState.refAcceleration))
      length = len(self.toroboJointState.refEffort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.toroboJointState.refEffort))
      length = len(self.toroboJointState.current)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.toroboJointState.current))
      length = len(self.toroboJointState.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.toroboJointState.position))
      length = len(self.toroboJointState.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.toroboJointState.velocity))
      length = len(self.toroboJointState.outConvInVelocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.toroboJointState.outConvInVelocity))
      length = len(self.toroboJointState.acceleration)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.toroboJointState.acceleration))
      length = len(self.toroboJointState.outConvInAcceleration)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.toroboJointState.outConvInAcceleration))
      length = len(self.toroboJointState.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.toroboJointState.effort))
      length = len(self.toroboJointState.temperature)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.toroboJointState.temperature))
      length = len(self.toroboJointState.general_0)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.toroboJointState.general_0))
      length = len(self.toroboJointState.general_1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.toroboJointState.general_1))
      length = len(self.toroboJointState.general_2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.toroboJointState.general_2))
      length = len(self.toroboJointState.general_3)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.toroboJointState.general_3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.toroboJointState is None:
        self.toroboJointState = torobo_msgs.msg.ToroboJointState()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.toroboJointState.header.seq, _x.toroboJointState.header.stamp.secs, _x.toroboJointState.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.toroboJointState.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.toroboJointState.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.toroboJointState.timeStamp, _x.toroboJointState.hostTimeStamp,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.toroboJointState.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.toroboJointState.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.type = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.comStatus = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.systemMode = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.ctrlMode = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.errorWarningStatus = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.trjStatus = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.trjViaRemain = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.refCurrent = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.refPosition = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.refVelocity = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.refAcceleration = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.refEffort = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.current = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.position = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.velocity = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.outConvInVelocity = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.acceleration = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.outConvInAcceleration = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.effort = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.temperature = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.general_0 = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.general_1 = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.general_2 = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.general_3 = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.toroboJointState.header.seq, _x.toroboJointState.header.stamp.secs, _x.toroboJointState.header.stamp.nsecs))
      _x = self.toroboJointState.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.toroboJointState.timeStamp, _x.toroboJointState.hostTimeStamp))
      length = len(self.toroboJointState.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.toroboJointState.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.toroboJointState.type)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.toroboJointState.type.tostring())
      length = len(self.toroboJointState.comStatus)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.toroboJointState.comStatus.tostring())
      length = len(self.toroboJointState.systemMode)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.toroboJointState.systemMode.tostring())
      length = len(self.toroboJointState.ctrlMode)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.toroboJointState.ctrlMode.tostring())
      length = len(self.toroboJointState.errorWarningStatus)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.toroboJointState.errorWarningStatus.tostring())
      length = len(self.toroboJointState.trjStatus)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.toroboJointState.trjStatus.tostring())
      length = len(self.toroboJointState.trjViaRemain)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.toroboJointState.trjViaRemain.tostring())
      length = len(self.toroboJointState.refCurrent)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.toroboJointState.refCurrent.tostring())
      length = len(self.toroboJointState.refPosition)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.toroboJointState.refPosition.tostring())
      length = len(self.toroboJointState.refVelocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.toroboJointState.refVelocity.tostring())
      length = len(self.toroboJointState.refAcceleration)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.toroboJointState.refAcceleration.tostring())
      length = len(self.toroboJointState.refEffort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.toroboJointState.refEffort.tostring())
      length = len(self.toroboJointState.current)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.toroboJointState.current.tostring())
      length = len(self.toroboJointState.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.toroboJointState.position.tostring())
      length = len(self.toroboJointState.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.toroboJointState.velocity.tostring())
      length = len(self.toroboJointState.outConvInVelocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.toroboJointState.outConvInVelocity.tostring())
      length = len(self.toroboJointState.acceleration)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.toroboJointState.acceleration.tostring())
      length = len(self.toroboJointState.outConvInAcceleration)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.toroboJointState.outConvInAcceleration.tostring())
      length = len(self.toroboJointState.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.toroboJointState.effort.tostring())
      length = len(self.toroboJointState.temperature)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.toroboJointState.temperature.tostring())
      length = len(self.toroboJointState.general_0)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.toroboJointState.general_0.tostring())
      length = len(self.toroboJointState.general_1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.toroboJointState.general_1.tostring())
      length = len(self.toroboJointState.general_2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.toroboJointState.general_2.tostring())
      length = len(self.toroboJointState.general_3)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.toroboJointState.general_3.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.toroboJointState is None:
        self.toroboJointState = torobo_msgs.msg.ToroboJointState()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.toroboJointState.header.seq, _x.toroboJointState.header.stamp.secs, _x.toroboJointState.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.toroboJointState.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.toroboJointState.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.toroboJointState.timeStamp, _x.toroboJointState.hostTimeStamp,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.toroboJointState.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.toroboJointState.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.type = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.comStatus = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.systemMode = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.ctrlMode = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.errorWarningStatus = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.trjStatus = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.trjViaRemain = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.refCurrent = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.refPosition = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.refVelocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.refAcceleration = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.refEffort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.current = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.outConvInVelocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.acceleration = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.outConvInAcceleration = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.temperature = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.general_0 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.general_1 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.general_2 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.toroboJointState.general_3 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
class GetToroboJointState(object):
  _type          = 'torobo_msgs/GetToroboJointState'
  _md5sum = 'f076a05b5c866f51043035790c9b9bbf'
  _request_class  = GetToroboJointStateRequest
  _response_class = GetToroboJointStateResponse
