// Auto-generated. Do not edit!

// (in-package torobo_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let trajectory_msgs = _finder('trajectory_msgs');

//-----------------------------------------------------------

class MoveTeachingTrajectoryFeedback {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.actual = null;
    }
    else {
      if (initObj.hasOwnProperty('actual')) {
        this.actual = initObj.actual
      }
      else {
        this.actual = new trajectory_msgs.msg.JointTrajectoryPoint();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type MoveTeachingTrajectoryFeedback
    // Serialize message field [actual]
    bufferOffset = trajectory_msgs.msg.JointTrajectoryPoint.serialize(obj.actual, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type MoveTeachingTrajectoryFeedback
    let len;
    let data = new MoveTeachingTrajectoryFeedback(null);
    // Deserialize message field [actual]
    data.actual = trajectory_msgs.msg.JointTrajectoryPoint.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += trajectory_msgs.msg.JointTrajectoryPoint.getMessageSize(object.actual);
    return length;
  }

  static datatype() {
    // Returns string type for a message object
    return 'torobo_msgs/MoveTeachingTrajectoryFeedback';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '473828e1b0881c8cb007ca255949f320';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Feedback
    trajectory_msgs/JointTrajectoryPoint actual
    
    ================================================================================
    MSG: trajectory_msgs/JointTrajectoryPoint
    # Each trajectory point specifies either positions[, velocities[, accelerations]]
    # or positions[, effort] for the trajectory to be executed.
    # All specified values are in the same order as the joint names in JointTrajectory.msg
    
    float64[] positions
    float64[] velocities
    float64[] accelerations
    float64[] effort
    duration time_from_start
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new MoveTeachingTrajectoryFeedback(null);
    if (msg.actual !== undefined) {
      resolved.actual = trajectory_msgs.msg.JointTrajectoryPoint.Resolve(msg.actual)
    }
    else {
      resolved.actual = new trajectory_msgs.msg.JointTrajectoryPoint()
    }

    return resolved;
    }
};

module.exports = MoveTeachingTrajectoryFeedback;
