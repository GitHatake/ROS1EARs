; Auto-generated. Do not edit!


(cl:in-package torobo_msgs-msg)


;//! \htmlinclude MoveTeachingPointResult.msg.html

(cl:defclass <MoveTeachingPointResult> (roslisp-msg-protocol:ros-message)
  ((errorCode
    :reader errorCode
    :initarg :errorCode
    :type cl:integer
    :initform 0)
   (jointState
    :reader jointState
    :initarg :jointState
    :type sensor_msgs-msg:JointState
    :initform (cl:make-instance 'sensor_msgs-msg:JointState)))
)

(cl:defclass MoveTeachingPointResult (<MoveTeachingPointResult>)
  ())

(cl:defmethod cl:initialize-instance :after ((m <MoveTeachingPointResult>) cl:&rest args)
  (cl:declare (cl:ignorable args))
  (cl:unless (cl:typep m 'MoveTeachingPointResult)
    (roslisp-msg-protocol:msg-deprecation-warning "using old message class name torobo_msgs-msg:<MoveTeachingPointResult> is deprecated: use torobo_msgs-msg:MoveTeachingPointResult instead.")))

(cl:ensure-generic-function 'errorCode-val :lambda-list '(m))
(cl:defmethod errorCode-val ((m <MoveTeachingPointResult>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader torobo_msgs-msg:errorCode-val is deprecated.  Use torobo_msgs-msg:errorCode instead.")
  (errorCode m))

(cl:ensure-generic-function 'jointState-val :lambda-list '(m))
(cl:defmethod jointState-val ((m <MoveTeachingPointResult>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader torobo_msgs-msg:jointState-val is deprecated.  Use torobo_msgs-msg:jointState instead.")
  (jointState m))
(cl:defmethod roslisp-msg-protocol:symbol-codes ((msg-type (cl:eql '<MoveTeachingPointResult>)))
    "Constants for message type '<MoveTeachingPointResult>"
  '((:SUCCESSFUL . 0)
    (:FAILURE . -1)
    (:PREEMPTED . -2))
)
(cl:defmethod roslisp-msg-protocol:symbol-codes ((msg-type (cl:eql 'MoveTeachingPointResult)))
    "Constants for message type 'MoveTeachingPointResult"
  '((:SUCCESSFUL . 0)
    (:FAILURE . -1)
    (:PREEMPTED . -2))
)
(cl:defmethod roslisp-msg-protocol:serialize ((msg <MoveTeachingPointResult>) ostream)
  "Serializes a message object of type '<MoveTeachingPointResult>"
  (cl:let* ((signed (cl:slot-value msg 'errorCode)) (unsigned (cl:if (cl:< signed 0) (cl:+ signed 4294967296) signed)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) unsigned) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) unsigned) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) unsigned) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) unsigned) ostream)
    )
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'jointState) ostream)
)
(cl:defmethod roslisp-msg-protocol:deserialize ((msg <MoveTeachingPointResult>) istream)
  "Deserializes a message object of type '<MoveTeachingPointResult>"
    (cl:let ((unsigned 0))
      (cl:setf (cl:ldb (cl:byte 8 0) unsigned) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) unsigned) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) unsigned) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) unsigned) (cl:read-byte istream))
      (cl:setf (cl:slot-value msg 'errorCode) (cl:if (cl:< unsigned 2147483648) unsigned (cl:- unsigned 4294967296))))
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'jointState) istream)
  msg
)
(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql '<MoveTeachingPointResult>)))
  "Returns string type for a message object of type '<MoveTeachingPointResult>"
  "torobo_msgs/MoveTeachingPointResult")
(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql 'MoveTeachingPointResult)))
  "Returns string type for a message object of type 'MoveTeachingPointResult"
  "torobo_msgs/MoveTeachingPointResult")
(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql '<MoveTeachingPointResult>)))
  "Returns md5sum for a message object of type '<MoveTeachingPointResult>"
  "5af78d1aaab840aeb31f007340c79c5c")
(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql 'MoveTeachingPointResult)))
  "Returns md5sum for a message object of type 'MoveTeachingPointResult"
  "5af78d1aaab840aeb31f007340c79c5c")
(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql '<MoveTeachingPointResult>)))
  "Returns full string definition for message of type '<MoveTeachingPointResult>"
  (cl:format cl:nil "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%# Result~%int32 errorCode~%int32 SUCCESSFUL = 0~%int32 FAILURE = -1~%int32 PREEMPTED = -2~%sensor_msgs/JointState jointState~%~%================================================================================~%MSG: sensor_msgs/JointState~%# This is a message that holds data to describe the state of a set of torque controlled joints. ~%#~%# The state of each joint (revolute or prismatic) is defined by:~%#  * the position of the joint (rad or m),~%#  * the velocity of the joint (rad/s or m/s) and ~%#  * the effort that is applied in the joint (Nm or N).~%#~%# Each joint is uniquely identified by its name~%# The header specifies the time at which the joint states were recorded. All the joint states~%# in one message have to be recorded at the same time.~%#~%# This message consists of a multiple arrays, one for each part of the joint state. ~%# The goal is to make each of the fields optional. When e.g. your joints have no~%# effort associated with them, you can leave the effort array empty. ~%#~%# All arrays in this message should have the same size, or be empty.~%# This is the only way to uniquely associate the joint name with the correct~%# states.~%~%~%Header header~%~%string[] name~%float64[] position~%float64[] velocity~%float64[] effort~%~%================================================================================~%MSG: std_msgs/Header~%# Standard metadata for higher-level stamped data types.~%# This is generally used to communicate timestamped data ~%# in a particular coordinate frame.~%# ~%# sequence ID: consecutively increasing ID ~%uint32 seq~%#Two-integer timestamp that is expressed as:~%# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')~%# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')~%# time-handling sugar is provided by the client library~%time stamp~%#Frame this data is associated with~%string frame_id~%~%~%"))
(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql 'MoveTeachingPointResult)))
  "Returns full string definition for message of type 'MoveTeachingPointResult"
  (cl:format cl:nil "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%# Result~%int32 errorCode~%int32 SUCCESSFUL = 0~%int32 FAILURE = -1~%int32 PREEMPTED = -2~%sensor_msgs/JointState jointState~%~%================================================================================~%MSG: sensor_msgs/JointState~%# This is a message that holds data to describe the state of a set of torque controlled joints. ~%#~%# The state of each joint (revolute or prismatic) is defined by:~%#  * the position of the joint (rad or m),~%#  * the velocity of the joint (rad/s or m/s) and ~%#  * the effort that is applied in the joint (Nm or N).~%#~%# Each joint is uniquely identified by its name~%# The header specifies the time at which the joint states were recorded. All the joint states~%# in one message have to be recorded at the same time.~%#~%# This message consists of a multiple arrays, one for each part of the joint state. ~%# The goal is to make each of the fields optional. When e.g. your joints have no~%# effort associated with them, you can leave the effort array empty. ~%#~%# All arrays in this message should have the same size, or be empty.~%# This is the only way to uniquely associate the joint name with the correct~%# states.~%~%~%Header header~%~%string[] name~%float64[] position~%float64[] velocity~%float64[] effort~%~%================================================================================~%MSG: std_msgs/Header~%# Standard metadata for higher-level stamped data types.~%# This is generally used to communicate timestamped data ~%# in a particular coordinate frame.~%# ~%# sequence ID: consecutively increasing ID ~%uint32 seq~%#Two-integer timestamp that is expressed as:~%# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')~%# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')~%# time-handling sugar is provided by the client library~%time stamp~%#Frame this data is associated with~%string frame_id~%~%~%"))
(cl:defmethod roslisp-msg-protocol:serialization-length ((msg <MoveTeachingPointResult>))
  (cl:+ 0
     4
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'jointState))
))
(cl:defmethod roslisp-msg-protocol:ros-message-to-list ((msg <MoveTeachingPointResult>))
  "Converts a ROS message object to a list"
  (cl:list 'MoveTeachingPointResult
    (cl:cons ':errorCode (errorCode msg))
    (cl:cons ':jointState (jointState msg))
))
