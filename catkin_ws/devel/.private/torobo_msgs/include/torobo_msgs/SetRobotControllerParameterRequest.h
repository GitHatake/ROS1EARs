// Generated by gencpp from file torobo_msgs/SetRobotControllerParameterRequest.msg
// DO NOT EDIT!


#ifndef TOROBO_MSGS_MESSAGE_SETROBOTCONTROLLERPARAMETERREQUEST_H
#define TOROBO_MSGS_MESSAGE_SETROBOTCONTROLLERPARAMETERREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace torobo_msgs
{
template <class ContainerAllocator>
struct SetRobotControllerParameterRequest_
{
  typedef SetRobotControllerParameterRequest_<ContainerAllocator> Type;

  SetRobotControllerParameterRequest_()
    : parameter_name()
    , joint_names()
    , parameter_values()  {
    }
  SetRobotControllerParameterRequest_(const ContainerAllocator& _alloc)
    : parameter_name(_alloc)
    , joint_names(_alloc)
    , parameter_values(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _parameter_name_type;
  _parameter_name_type parameter_name;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _joint_names_type;
  _joint_names_type joint_names;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _parameter_values_type;
  _parameter_values_type parameter_values;





  typedef boost::shared_ptr< ::torobo_msgs::SetRobotControllerParameterRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::torobo_msgs::SetRobotControllerParameterRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetRobotControllerParameterRequest_

typedef ::torobo_msgs::SetRobotControllerParameterRequest_<std::allocator<void> > SetRobotControllerParameterRequest;

typedef boost::shared_ptr< ::torobo_msgs::SetRobotControllerParameterRequest > SetRobotControllerParameterRequestPtr;
typedef boost::shared_ptr< ::torobo_msgs::SetRobotControllerParameterRequest const> SetRobotControllerParameterRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::torobo_msgs::SetRobotControllerParameterRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::torobo_msgs::SetRobotControllerParameterRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::torobo_msgs::SetRobotControllerParameterRequest_<ContainerAllocator1> & lhs, const ::torobo_msgs::SetRobotControllerParameterRequest_<ContainerAllocator2> & rhs)
{
  return lhs.parameter_name == rhs.parameter_name &&
    lhs.joint_names == rhs.joint_names &&
    lhs.parameter_values == rhs.parameter_values;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::torobo_msgs::SetRobotControllerParameterRequest_<ContainerAllocator1> & lhs, const ::torobo_msgs::SetRobotControllerParameterRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace torobo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::torobo_msgs::SetRobotControllerParameterRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::torobo_msgs::SetRobotControllerParameterRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::torobo_msgs::SetRobotControllerParameterRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::torobo_msgs::SetRobotControllerParameterRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::torobo_msgs::SetRobotControllerParameterRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::torobo_msgs::SetRobotControllerParameterRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::torobo_msgs::SetRobotControllerParameterRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "809bf8ee7e3ad4cfaee151a913a9f52a";
  }

  static const char* value(const ::torobo_msgs::SetRobotControllerParameterRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x809bf8ee7e3ad4cfULL;
  static const uint64_t static_value2 = 0xaee151a913a9f52aULL;
};

template<class ContainerAllocator>
struct DataType< ::torobo_msgs::SetRobotControllerParameterRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "torobo_msgs/SetRobotControllerParameterRequest";
  }

  static const char* value(const ::torobo_msgs::SetRobotControllerParameterRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::torobo_msgs::SetRobotControllerParameterRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string parameter_name\n"
"string[] joint_names\n"
"float32[] parameter_values\n"
;
  }

  static const char* value(const ::torobo_msgs::SetRobotControllerParameterRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::torobo_msgs::SetRobotControllerParameterRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.parameter_name);
      stream.next(m.joint_names);
      stream.next(m.parameter_values);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetRobotControllerParameterRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::torobo_msgs::SetRobotControllerParameterRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::torobo_msgs::SetRobotControllerParameterRequest_<ContainerAllocator>& v)
  {
    s << indent << "parameter_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.parameter_name);
    s << indent << "joint_names[]" << std::endl;
    for (size_t i = 0; i < v.joint_names.size(); ++i)
    {
      s << indent << "  joint_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.joint_names[i]);
    }
    s << indent << "parameter_values[]" << std::endl;
    for (size_t i = 0; i < v.parameter_values.size(); ++i)
    {
      s << indent << "  parameter_values[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.parameter_values[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TOROBO_MSGS_MESSAGE_SETROBOTCONTROLLERPARAMETERREQUEST_H
