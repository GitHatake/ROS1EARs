// Generated by gencpp from file torobo_msgs/ToroboDynamics.msg
// DO NOT EDIT!


#ifndef TOROBO_MSGS_MESSAGE_TOROBODYNAMICS_H
#define TOROBO_MSGS_MESSAGE_TOROBODYNAMICS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace torobo_msgs
{
template <class ContainerAllocator>
struct ToroboDynamics_
{
  typedef ToroboDynamics_<ContainerAllocator> Type;

  ToroboDynamics_()
    : header()
    , timeStamp(0)
    , name()
    , gravity_compensation_effort()
    , ref_dynamics_effort()
    , cur_dynamics_effort()
    , inertia_diagonal()  {
    }
  ToroboDynamics_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , timeStamp(0)
    , name(_alloc)
    , gravity_compensation_effort(_alloc)
    , ref_dynamics_effort(_alloc)
    , cur_dynamics_effort(_alloc)
    , inertia_diagonal(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint64_t _timeStamp_type;
  _timeStamp_type timeStamp;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _name_type;
  _name_type name;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _gravity_compensation_effort_type;
  _gravity_compensation_effort_type gravity_compensation_effort;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _ref_dynamics_effort_type;
  _ref_dynamics_effort_type ref_dynamics_effort;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _cur_dynamics_effort_type;
  _cur_dynamics_effort_type cur_dynamics_effort;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _inertia_diagonal_type;
  _inertia_diagonal_type inertia_diagonal;





  typedef boost::shared_ptr< ::torobo_msgs::ToroboDynamics_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::torobo_msgs::ToroboDynamics_<ContainerAllocator> const> ConstPtr;

}; // struct ToroboDynamics_

typedef ::torobo_msgs::ToroboDynamics_<std::allocator<void> > ToroboDynamics;

typedef boost::shared_ptr< ::torobo_msgs::ToroboDynamics > ToroboDynamicsPtr;
typedef boost::shared_ptr< ::torobo_msgs::ToroboDynamics const> ToroboDynamicsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::torobo_msgs::ToroboDynamics_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::torobo_msgs::ToroboDynamics_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::torobo_msgs::ToroboDynamics_<ContainerAllocator1> & lhs, const ::torobo_msgs::ToroboDynamics_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.timeStamp == rhs.timeStamp &&
    lhs.name == rhs.name &&
    lhs.gravity_compensation_effort == rhs.gravity_compensation_effort &&
    lhs.ref_dynamics_effort == rhs.ref_dynamics_effort &&
    lhs.cur_dynamics_effort == rhs.cur_dynamics_effort &&
    lhs.inertia_diagonal == rhs.inertia_diagonal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::torobo_msgs::ToroboDynamics_<ContainerAllocator1> & lhs, const ::torobo_msgs::ToroboDynamics_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace torobo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::torobo_msgs::ToroboDynamics_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::torobo_msgs::ToroboDynamics_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::torobo_msgs::ToroboDynamics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::torobo_msgs::ToroboDynamics_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::torobo_msgs::ToroboDynamics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::torobo_msgs::ToroboDynamics_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::torobo_msgs::ToroboDynamics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ddf478c1627240b10931b0b2684ea858";
  }

  static const char* value(const ::torobo_msgs::ToroboDynamics_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xddf478c1627240b1ULL;
  static const uint64_t static_value2 = 0x0931b0b2684ea858ULL;
};

template<class ContainerAllocator>
struct DataType< ::torobo_msgs::ToroboDynamics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "torobo_msgs/ToroboDynamics";
  }

  static const char* value(const ::torobo_msgs::ToroboDynamics_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::torobo_msgs::ToroboDynamics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"uint64 timeStamp\n"
"string[] name\n"
"float64[] gravity_compensation_effort\n"
"float64[] ref_dynamics_effort\n"
"float64[] cur_dynamics_effort\n"
"float64[] inertia_diagonal\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::torobo_msgs::ToroboDynamics_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::torobo_msgs::ToroboDynamics_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.timeStamp);
      stream.next(m.name);
      stream.next(m.gravity_compensation_effort);
      stream.next(m.ref_dynamics_effort);
      stream.next(m.cur_dynamics_effort);
      stream.next(m.inertia_diagonal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ToroboDynamics_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::torobo_msgs::ToroboDynamics_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::torobo_msgs::ToroboDynamics_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "timeStamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.timeStamp);
    s << indent << "name[]" << std::endl;
    for (size_t i = 0; i < v.name.size(); ++i)
    {
      s << indent << "  name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name[i]);
    }
    s << indent << "gravity_compensation_effort[]" << std::endl;
    for (size_t i = 0; i < v.gravity_compensation_effort.size(); ++i)
    {
      s << indent << "  gravity_compensation_effort[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.gravity_compensation_effort[i]);
    }
    s << indent << "ref_dynamics_effort[]" << std::endl;
    for (size_t i = 0; i < v.ref_dynamics_effort.size(); ++i)
    {
      s << indent << "  ref_dynamics_effort[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.ref_dynamics_effort[i]);
    }
    s << indent << "cur_dynamics_effort[]" << std::endl;
    for (size_t i = 0; i < v.cur_dynamics_effort.size(); ++i)
    {
      s << indent << "  cur_dynamics_effort[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.cur_dynamics_effort[i]);
    }
    s << indent << "inertia_diagonal[]" << std::endl;
    for (size_t i = 0; i < v.inertia_diagonal.size(); ++i)
    {
      s << indent << "  inertia_diagonal[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.inertia_diagonal[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TOROBO_MSGS_MESSAGE_TOROBODYNAMICS_H
