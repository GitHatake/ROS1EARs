// Generated by gencpp from file torobo_msgs/test_message.msg
// DO NOT EDIT!


#ifndef TOROBO_MSGS_MESSAGE_TEST_MESSAGE_H
#define TOROBO_MSGS_MESSAGE_TEST_MESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace torobo_msgs
{
template <class ContainerAllocator>
struct test_message_
{
  typedef test_message_<ContainerAllocator> Type;

  test_message_()
    : header()
    , timeStamp(0)
    , test_float1(0.0)
    , test_float2(0.0)  {
    }
  test_message_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , timeStamp(0)
    , test_float1(0.0)
    , test_float2(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint64_t _timeStamp_type;
  _timeStamp_type timeStamp;

   typedef double _test_float1_type;
  _test_float1_type test_float1;

   typedef double _test_float2_type;
  _test_float2_type test_float2;





  typedef boost::shared_ptr< ::torobo_msgs::test_message_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::torobo_msgs::test_message_<ContainerAllocator> const> ConstPtr;

}; // struct test_message_

typedef ::torobo_msgs::test_message_<std::allocator<void> > test_message;

typedef boost::shared_ptr< ::torobo_msgs::test_message > test_messagePtr;
typedef boost::shared_ptr< ::torobo_msgs::test_message const> test_messageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::torobo_msgs::test_message_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::torobo_msgs::test_message_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::torobo_msgs::test_message_<ContainerAllocator1> & lhs, const ::torobo_msgs::test_message_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.timeStamp == rhs.timeStamp &&
    lhs.test_float1 == rhs.test_float1 &&
    lhs.test_float2 == rhs.test_float2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::torobo_msgs::test_message_<ContainerAllocator1> & lhs, const ::torobo_msgs::test_message_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace torobo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::torobo_msgs::test_message_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::torobo_msgs::test_message_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::torobo_msgs::test_message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::torobo_msgs::test_message_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::torobo_msgs::test_message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::torobo_msgs::test_message_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::torobo_msgs::test_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "96068ba7517aeb29192183e2d4f6c968";
  }

  static const char* value(const ::torobo_msgs::test_message_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x96068ba7517aeb29ULL;
  static const uint64_t static_value2 = 0x192183e2d4f6c968ULL;
};

template<class ContainerAllocator>
struct DataType< ::torobo_msgs::test_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "torobo_msgs/test_message";
  }

  static const char* value(const ::torobo_msgs::test_message_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::torobo_msgs::test_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"uint64 timeStamp\n"
"float64 test_float1\n"
"float64 test_float2\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::torobo_msgs::test_message_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::torobo_msgs::test_message_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.timeStamp);
      stream.next(m.test_float1);
      stream.next(m.test_float2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct test_message_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::torobo_msgs::test_message_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::torobo_msgs::test_message_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "timeStamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.timeStamp);
    s << indent << "test_float1: ";
    Printer<double>::stream(s, indent + "  ", v.test_float1);
    s << indent << "test_float2: ";
    Printer<double>::stream(s, indent + "  ", v.test_float2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TOROBO_MSGS_MESSAGE_TEST_MESSAGE_H
