// Generated by gencpp from file torobo_msgs/GetCollisionInfoResponse.msg
// DO NOT EDIT!


#ifndef TOROBO_MSGS_MESSAGE_GETCOLLISIONINFORESPONSE_H
#define TOROBO_MSGS_MESSAGE_GETCOLLISIONINFORESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <torobo_msgs/CollisionInfoResponse.h>

namespace torobo_msgs
{
template <class ContainerAllocator>
struct GetCollisionInfoResponse_
{
  typedef GetCollisionInfoResponse_<ContainerAllocator> Type;

  GetCollisionInfoResponse_()
    : collision_info_response()  {
    }
  GetCollisionInfoResponse_(const ContainerAllocator& _alloc)
    : collision_info_response(_alloc)  {
  (void)_alloc;
    }



   typedef  ::torobo_msgs::CollisionInfoResponse_<ContainerAllocator>  _collision_info_response_type;
  _collision_info_response_type collision_info_response;





  typedef boost::shared_ptr< ::torobo_msgs::GetCollisionInfoResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::torobo_msgs::GetCollisionInfoResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetCollisionInfoResponse_

typedef ::torobo_msgs::GetCollisionInfoResponse_<std::allocator<void> > GetCollisionInfoResponse;

typedef boost::shared_ptr< ::torobo_msgs::GetCollisionInfoResponse > GetCollisionInfoResponsePtr;
typedef boost::shared_ptr< ::torobo_msgs::GetCollisionInfoResponse const> GetCollisionInfoResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::torobo_msgs::GetCollisionInfoResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::torobo_msgs::GetCollisionInfoResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::torobo_msgs::GetCollisionInfoResponse_<ContainerAllocator1> & lhs, const ::torobo_msgs::GetCollisionInfoResponse_<ContainerAllocator2> & rhs)
{
  return lhs.collision_info_response == rhs.collision_info_response;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::torobo_msgs::GetCollisionInfoResponse_<ContainerAllocator1> & lhs, const ::torobo_msgs::GetCollisionInfoResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace torobo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::torobo_msgs::GetCollisionInfoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::torobo_msgs::GetCollisionInfoResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::torobo_msgs::GetCollisionInfoResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::torobo_msgs::GetCollisionInfoResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::torobo_msgs::GetCollisionInfoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::torobo_msgs::GetCollisionInfoResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::torobo_msgs::GetCollisionInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c12beeb1198598970a25063d5afd8be9";
  }

  static const char* value(const ::torobo_msgs::GetCollisionInfoResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc12beeb119859897ULL;
  static const uint64_t static_value2 = 0x0a25063d5afd8be9ULL;
};

template<class ContainerAllocator>
struct DataType< ::torobo_msgs::GetCollisionInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "torobo_msgs/GetCollisionInfoResponse";
  }

  static const char* value(const ::torobo_msgs::GetCollisionInfoResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::torobo_msgs::GetCollisionInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "CollisionInfoResponse collision_info_response\n"
"\n"
"\n"
"================================================================================\n"
"MSG: torobo_msgs/CollisionInfoResponse\n"
"bool isColliding\n"
"moveit_msgs/ContactInformation[] contacts\n"
"\n"
"================================================================================\n"
"MSG: moveit_msgs/ContactInformation\n"
"# Standard ROS header contains information \n"
"# about the frame in which this \n"
"# contact is specified\n"
"Header header\n"
"\n"
"# Position of the contact point\n"
"geometry_msgs/Point position\n"
"\n"
"# Normal corresponding to the contact point\n"
"geometry_msgs/Vector3 normal \n"
"\n"
"# Depth of contact point\n"
"float64 depth\n"
"\n"
"# Name of the first body that is in contact\n"
"# This could be a link or a namespace that represents a body\n"
"string contact_body_1\n"
"uint32 body_type_1\n"
"\n"
"# Name of the second body that is in contact\n"
"# This could be a link or a namespace that represents a body\n"
"string contact_body_2\n"
"uint32 body_type_2\n"
"\n"
"uint32 ROBOT_LINK=0\n"
"uint32 WORLD_OBJECT=1\n"
"uint32 ROBOT_ATTACHED=2\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::torobo_msgs::GetCollisionInfoResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::torobo_msgs::GetCollisionInfoResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.collision_info_response);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetCollisionInfoResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::torobo_msgs::GetCollisionInfoResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::torobo_msgs::GetCollisionInfoResponse_<ContainerAllocator>& v)
  {
    s << indent << "collision_info_response: ";
    s << std::endl;
    Printer< ::torobo_msgs::CollisionInfoResponse_<ContainerAllocator> >::stream(s, indent + "  ", v.collision_info_response);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TOROBO_MSGS_MESSAGE_GETCOLLISIONINFORESPONSE_H
