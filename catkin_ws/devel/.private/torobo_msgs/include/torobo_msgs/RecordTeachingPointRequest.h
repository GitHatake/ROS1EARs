// Generated by gencpp from file torobo_msgs/RecordTeachingPointRequest.msg
// DO NOT EDIT!


#ifndef TOROBO_MSGS_MESSAGE_RECORDTEACHINGPOINTREQUEST_H
#define TOROBO_MSGS_MESSAGE_RECORDTEACHINGPOINTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <trajectory_msgs/JointTrajectoryPoint.h>

namespace torobo_msgs
{
template <class ContainerAllocator>
struct RecordTeachingPointRequest_
{
  typedef RecordTeachingPointRequest_<ContainerAllocator> Type;

  RecordTeachingPointRequest_()
    : teachingPointName()
    , point()  {
    }
  RecordTeachingPointRequest_(const ContainerAllocator& _alloc)
    : teachingPointName(_alloc)
    , point(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _teachingPointName_type;
  _teachingPointName_type teachingPointName;

   typedef  ::trajectory_msgs::JointTrajectoryPoint_<ContainerAllocator>  _point_type;
  _point_type point;





  typedef boost::shared_ptr< ::torobo_msgs::RecordTeachingPointRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::torobo_msgs::RecordTeachingPointRequest_<ContainerAllocator> const> ConstPtr;

}; // struct RecordTeachingPointRequest_

typedef ::torobo_msgs::RecordTeachingPointRequest_<std::allocator<void> > RecordTeachingPointRequest;

typedef boost::shared_ptr< ::torobo_msgs::RecordTeachingPointRequest > RecordTeachingPointRequestPtr;
typedef boost::shared_ptr< ::torobo_msgs::RecordTeachingPointRequest const> RecordTeachingPointRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::torobo_msgs::RecordTeachingPointRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::torobo_msgs::RecordTeachingPointRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::torobo_msgs::RecordTeachingPointRequest_<ContainerAllocator1> & lhs, const ::torobo_msgs::RecordTeachingPointRequest_<ContainerAllocator2> & rhs)
{
  return lhs.teachingPointName == rhs.teachingPointName &&
    lhs.point == rhs.point;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::torobo_msgs::RecordTeachingPointRequest_<ContainerAllocator1> & lhs, const ::torobo_msgs::RecordTeachingPointRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace torobo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::torobo_msgs::RecordTeachingPointRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::torobo_msgs::RecordTeachingPointRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::torobo_msgs::RecordTeachingPointRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::torobo_msgs::RecordTeachingPointRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::torobo_msgs::RecordTeachingPointRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::torobo_msgs::RecordTeachingPointRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::torobo_msgs::RecordTeachingPointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1be1bc2a5f104421491080126e043f79";
  }

  static const char* value(const ::torobo_msgs::RecordTeachingPointRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1be1bc2a5f104421ULL;
  static const uint64_t static_value2 = 0x491080126e043f79ULL;
};

template<class ContainerAllocator>
struct DataType< ::torobo_msgs::RecordTeachingPointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "torobo_msgs/RecordTeachingPointRequest";
  }

  static const char* value(const ::torobo_msgs::RecordTeachingPointRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::torobo_msgs::RecordTeachingPointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string teachingPointName\n"
"trajectory_msgs/JointTrajectoryPoint point \n"
"\n"
"================================================================================\n"
"MSG: trajectory_msgs/JointTrajectoryPoint\n"
"# Each trajectory point specifies either positions[, velocities[, accelerations]]\n"
"# or positions[, effort] for the trajectory to be executed.\n"
"# All specified values are in the same order as the joint names in JointTrajectory.msg\n"
"\n"
"float64[] positions\n"
"float64[] velocities\n"
"float64[] accelerations\n"
"float64[] effort\n"
"duration time_from_start\n"
;
  }

  static const char* value(const ::torobo_msgs::RecordTeachingPointRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::torobo_msgs::RecordTeachingPointRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.teachingPointName);
      stream.next(m.point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RecordTeachingPointRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::torobo_msgs::RecordTeachingPointRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::torobo_msgs::RecordTeachingPointRequest_<ContainerAllocator>& v)
  {
    s << indent << "teachingPointName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.teachingPointName);
    s << indent << "point: ";
    s << std::endl;
    Printer< ::trajectory_msgs::JointTrajectoryPoint_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TOROBO_MSGS_MESSAGE_RECORDTEACHINGPOINTREQUEST_H
