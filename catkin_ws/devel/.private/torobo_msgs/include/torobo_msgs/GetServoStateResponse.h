// Generated by gencpp from file torobo_msgs/GetServoStateResponse.msg
// DO NOT EDIT!


#ifndef TOROBO_MSGS_MESSAGE_GETSERVOSTATERESPONSE_H
#define TOROBO_MSGS_MESSAGE_GETSERVOSTATERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace torobo_msgs
{
template <class ContainerAllocator>
struct GetServoStateResponse_
{
  typedef GetServoStateResponse_<ContainerAllocator> Type;

  GetServoStateResponse_()
    : is_servo_on()  {
    }
  GetServoStateResponse_(const ContainerAllocator& _alloc)
    : is_servo_on(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _is_servo_on_type;
  _is_servo_on_type is_servo_on;





  typedef boost::shared_ptr< ::torobo_msgs::GetServoStateResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::torobo_msgs::GetServoStateResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetServoStateResponse_

typedef ::torobo_msgs::GetServoStateResponse_<std::allocator<void> > GetServoStateResponse;

typedef boost::shared_ptr< ::torobo_msgs::GetServoStateResponse > GetServoStateResponsePtr;
typedef boost::shared_ptr< ::torobo_msgs::GetServoStateResponse const> GetServoStateResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::torobo_msgs::GetServoStateResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::torobo_msgs::GetServoStateResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::torobo_msgs::GetServoStateResponse_<ContainerAllocator1> & lhs, const ::torobo_msgs::GetServoStateResponse_<ContainerAllocator2> & rhs)
{
  return lhs.is_servo_on == rhs.is_servo_on;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::torobo_msgs::GetServoStateResponse_<ContainerAllocator1> & lhs, const ::torobo_msgs::GetServoStateResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace torobo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::torobo_msgs::GetServoStateResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::torobo_msgs::GetServoStateResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::torobo_msgs::GetServoStateResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::torobo_msgs::GetServoStateResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::torobo_msgs::GetServoStateResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::torobo_msgs::GetServoStateResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::torobo_msgs::GetServoStateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2f5ed245f1555ab9b0d81b89496b5632";
  }

  static const char* value(const ::torobo_msgs::GetServoStateResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2f5ed245f1555ab9ULL;
  static const uint64_t static_value2 = 0xb0d81b89496b5632ULL;
};

template<class ContainerAllocator>
struct DataType< ::torobo_msgs::GetServoStateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "torobo_msgs/GetServoStateResponse";
  }

  static const char* value(const ::torobo_msgs::GetServoStateResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::torobo_msgs::GetServoStateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool[] is_servo_on\n"
;
  }

  static const char* value(const ::torobo_msgs::GetServoStateResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::torobo_msgs::GetServoStateResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.is_servo_on);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetServoStateResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::torobo_msgs::GetServoStateResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::torobo_msgs::GetServoStateResponse_<ContainerAllocator>& v)
  {
    s << indent << "is_servo_on[]" << std::endl;
    for (size_t i = 0; i < v.is_servo_on.size(); ++i)
    {
      s << indent << "  is_servo_on[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.is_servo_on[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TOROBO_MSGS_MESSAGE_GETSERVOSTATERESPONSE_H
