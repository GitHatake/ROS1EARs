// Generated by gencpp from file torobo_msgs/SendCommonCommandRequest.msg
// DO NOT EDIT!


#ifndef TOROBO_MSGS_MESSAGE_SENDCOMMONCOMMANDREQUEST_H
#define TOROBO_MSGS_MESSAGE_SENDCOMMONCOMMANDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace torobo_msgs
{
template <class ContainerAllocator>
struct SendCommonCommandRequest_
{
  typedef SendCommonCommandRequest_<ContainerAllocator> Type;

  SendCommonCommandRequest_()
    : joint_names()
    , whole_order(0)
    , joint_order(0)
    , value1(0.0)
    , value2(0.0)
    , value3(0.0)
    , value4(0.0)  {
    }
  SendCommonCommandRequest_(const ContainerAllocator& _alloc)
    : joint_names(_alloc)
    , whole_order(0)
    , joint_order(0)
    , value1(0.0)
    , value2(0.0)
    , value3(0.0)
    , value4(0.0)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _joint_names_type;
  _joint_names_type joint_names;

   typedef uint32_t _whole_order_type;
  _whole_order_type whole_order;

   typedef uint32_t _joint_order_type;
  _joint_order_type joint_order;

   typedef float _value1_type;
  _value1_type value1;

   typedef float _value2_type;
  _value2_type value2;

   typedef float _value3_type;
  _value3_type value3;

   typedef float _value4_type;
  _value4_type value4;





  typedef boost::shared_ptr< ::torobo_msgs::SendCommonCommandRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::torobo_msgs::SendCommonCommandRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SendCommonCommandRequest_

typedef ::torobo_msgs::SendCommonCommandRequest_<std::allocator<void> > SendCommonCommandRequest;

typedef boost::shared_ptr< ::torobo_msgs::SendCommonCommandRequest > SendCommonCommandRequestPtr;
typedef boost::shared_ptr< ::torobo_msgs::SendCommonCommandRequest const> SendCommonCommandRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::torobo_msgs::SendCommonCommandRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::torobo_msgs::SendCommonCommandRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::torobo_msgs::SendCommonCommandRequest_<ContainerAllocator1> & lhs, const ::torobo_msgs::SendCommonCommandRequest_<ContainerAllocator2> & rhs)
{
  return lhs.joint_names == rhs.joint_names &&
    lhs.whole_order == rhs.whole_order &&
    lhs.joint_order == rhs.joint_order &&
    lhs.value1 == rhs.value1 &&
    lhs.value2 == rhs.value2 &&
    lhs.value3 == rhs.value3 &&
    lhs.value4 == rhs.value4;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::torobo_msgs::SendCommonCommandRequest_<ContainerAllocator1> & lhs, const ::torobo_msgs::SendCommonCommandRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace torobo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::torobo_msgs::SendCommonCommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::torobo_msgs::SendCommonCommandRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::torobo_msgs::SendCommonCommandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::torobo_msgs::SendCommonCommandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::torobo_msgs::SendCommonCommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::torobo_msgs::SendCommonCommandRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::torobo_msgs::SendCommonCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "58beac3de2d0d9e66b388dbe5228c3fa";
  }

  static const char* value(const ::torobo_msgs::SendCommonCommandRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x58beac3de2d0d9e6ULL;
  static const uint64_t static_value2 = 0x6b388dbe5228c3faULL;
};

template<class ContainerAllocator>
struct DataType< ::torobo_msgs::SendCommonCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "torobo_msgs/SendCommonCommandRequest";
  }

  static const char* value(const ::torobo_msgs::SendCommonCommandRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::torobo_msgs::SendCommonCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] joint_names\n"
"uint32 whole_order\n"
"uint32 joint_order\n"
"float32 value1\n"
"float32 value2\n"
"float32 value3\n"
"float32 value4\n"
;
  }

  static const char* value(const ::torobo_msgs::SendCommonCommandRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::torobo_msgs::SendCommonCommandRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_names);
      stream.next(m.whole_order);
      stream.next(m.joint_order);
      stream.next(m.value1);
      stream.next(m.value2);
      stream.next(m.value3);
      stream.next(m.value4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SendCommonCommandRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::torobo_msgs::SendCommonCommandRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::torobo_msgs::SendCommonCommandRequest_<ContainerAllocator>& v)
  {
    s << indent << "joint_names[]" << std::endl;
    for (size_t i = 0; i < v.joint_names.size(); ++i)
    {
      s << indent << "  joint_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.joint_names[i]);
    }
    s << indent << "whole_order: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.whole_order);
    s << indent << "joint_order: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.joint_order);
    s << indent << "value1: ";
    Printer<float>::stream(s, indent + "  ", v.value1);
    s << indent << "value2: ";
    Printer<float>::stream(s, indent + "  ", v.value2);
    s << indent << "value3: ";
    Printer<float>::stream(s, indent + "  ", v.value3);
    s << indent << "value4: ";
    Printer<float>::stream(s, indent + "  ", v.value4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TOROBO_MSGS_MESSAGE_SENDCOMMONCOMMANDREQUEST_H
