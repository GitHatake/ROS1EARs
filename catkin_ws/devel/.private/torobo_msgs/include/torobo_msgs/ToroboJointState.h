// Generated by gencpp from file torobo_msgs/ToroboJointState.msg
// DO NOT EDIT!


#ifndef TOROBO_MSGS_MESSAGE_TOROBOJOINTSTATE_H
#define TOROBO_MSGS_MESSAGE_TOROBOJOINTSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace torobo_msgs
{
template <class ContainerAllocator>
struct ToroboJointState_
{
  typedef ToroboJointState_<ContainerAllocator> Type;

  ToroboJointState_()
    : header()
    , timeStamp(0)
    , hostTimeStamp(0)
    , name()
    , type()
    , comStatus()
    , systemMode()
    , ctrlMode()
    , errorWarningStatus()
    , trjStatus()
    , trjViaRemain()
    , refCurrent()
    , refPosition()
    , refVelocity()
    , refAcceleration()
    , refEffort()
    , current()
    , position()
    , velocity()
    , outConvInVelocity()
    , acceleration()
    , outConvInAcceleration()
    , effort()
    , temperature()
    , general_0()
    , general_1()
    , general_2()
    , general_3()  {
    }
  ToroboJointState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , timeStamp(0)
    , hostTimeStamp(0)
    , name(_alloc)
    , type(_alloc)
    , comStatus(_alloc)
    , systemMode(_alloc)
    , ctrlMode(_alloc)
    , errorWarningStatus(_alloc)
    , trjStatus(_alloc)
    , trjViaRemain(_alloc)
    , refCurrent(_alloc)
    , refPosition(_alloc)
    , refVelocity(_alloc)
    , refAcceleration(_alloc)
    , refEffort(_alloc)
    , current(_alloc)
    , position(_alloc)
    , velocity(_alloc)
    , outConvInVelocity(_alloc)
    , acceleration(_alloc)
    , outConvInAcceleration(_alloc)
    , effort(_alloc)
    , temperature(_alloc)
    , general_0(_alloc)
    , general_1(_alloc)
    , general_2(_alloc)
    , general_3(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint64_t _timeStamp_type;
  _timeStamp_type timeStamp;

   typedef uint64_t _hostTimeStamp_type;
  _hostTimeStamp_type hostTimeStamp;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _name_type;
  _name_type name;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _type_type;
  _type_type type;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _comStatus_type;
  _comStatus_type comStatus;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _systemMode_type;
  _systemMode_type systemMode;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _ctrlMode_type;
  _ctrlMode_type ctrlMode;

   typedef std::vector<uint64_t, typename ContainerAllocator::template rebind<uint64_t>::other >  _errorWarningStatus_type;
  _errorWarningStatus_type errorWarningStatus;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _trjStatus_type;
  _trjStatus_type trjStatus;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _trjViaRemain_type;
  _trjViaRemain_type trjViaRemain;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _refCurrent_type;
  _refCurrent_type refCurrent;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _refPosition_type;
  _refPosition_type refPosition;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _refVelocity_type;
  _refVelocity_type refVelocity;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _refAcceleration_type;
  _refAcceleration_type refAcceleration;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _refEffort_type;
  _refEffort_type refEffort;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _current_type;
  _current_type current;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _position_type;
  _position_type position;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _velocity_type;
  _velocity_type velocity;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _outConvInVelocity_type;
  _outConvInVelocity_type outConvInVelocity;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _acceleration_type;
  _acceleration_type acceleration;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _outConvInAcceleration_type;
  _outConvInAcceleration_type outConvInAcceleration;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _effort_type;
  _effort_type effort;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _temperature_type;
  _temperature_type temperature;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _general_0_type;
  _general_0_type general_0;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _general_1_type;
  _general_1_type general_1;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _general_2_type;
  _general_2_type general_2;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _general_3_type;
  _general_3_type general_3;





  typedef boost::shared_ptr< ::torobo_msgs::ToroboJointState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::torobo_msgs::ToroboJointState_<ContainerAllocator> const> ConstPtr;

}; // struct ToroboJointState_

typedef ::torobo_msgs::ToroboJointState_<std::allocator<void> > ToroboJointState;

typedef boost::shared_ptr< ::torobo_msgs::ToroboJointState > ToroboJointStatePtr;
typedef boost::shared_ptr< ::torobo_msgs::ToroboJointState const> ToroboJointStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::torobo_msgs::ToroboJointState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::torobo_msgs::ToroboJointState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::torobo_msgs::ToroboJointState_<ContainerAllocator1> & lhs, const ::torobo_msgs::ToroboJointState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.timeStamp == rhs.timeStamp &&
    lhs.hostTimeStamp == rhs.hostTimeStamp &&
    lhs.name == rhs.name &&
    lhs.type == rhs.type &&
    lhs.comStatus == rhs.comStatus &&
    lhs.systemMode == rhs.systemMode &&
    lhs.ctrlMode == rhs.ctrlMode &&
    lhs.errorWarningStatus == rhs.errorWarningStatus &&
    lhs.trjStatus == rhs.trjStatus &&
    lhs.trjViaRemain == rhs.trjViaRemain &&
    lhs.refCurrent == rhs.refCurrent &&
    lhs.refPosition == rhs.refPosition &&
    lhs.refVelocity == rhs.refVelocity &&
    lhs.refAcceleration == rhs.refAcceleration &&
    lhs.refEffort == rhs.refEffort &&
    lhs.current == rhs.current &&
    lhs.position == rhs.position &&
    lhs.velocity == rhs.velocity &&
    lhs.outConvInVelocity == rhs.outConvInVelocity &&
    lhs.acceleration == rhs.acceleration &&
    lhs.outConvInAcceleration == rhs.outConvInAcceleration &&
    lhs.effort == rhs.effort &&
    lhs.temperature == rhs.temperature &&
    lhs.general_0 == rhs.general_0 &&
    lhs.general_1 == rhs.general_1 &&
    lhs.general_2 == rhs.general_2 &&
    lhs.general_3 == rhs.general_3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::torobo_msgs::ToroboJointState_<ContainerAllocator1> & lhs, const ::torobo_msgs::ToroboJointState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace torobo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::torobo_msgs::ToroboJointState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::torobo_msgs::ToroboJointState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::torobo_msgs::ToroboJointState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::torobo_msgs::ToroboJointState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::torobo_msgs::ToroboJointState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::torobo_msgs::ToroboJointState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::torobo_msgs::ToroboJointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a5d3c515466b817694ef73e566496757";
  }

  static const char* value(const ::torobo_msgs::ToroboJointState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa5d3c515466b8176ULL;
  static const uint64_t static_value2 = 0x94ef73e566496757ULL;
};

template<class ContainerAllocator>
struct DataType< ::torobo_msgs::ToroboJointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "torobo_msgs/ToroboJointState";
  }

  static const char* value(const ::torobo_msgs::ToroboJointState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::torobo_msgs::ToroboJointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"uint64 timeStamp\n"
"uint64 hostTimeStamp\n"
"string[] name\n"
"uint32[] type\n"
"uint32[] comStatus\n"
"uint32[] systemMode\n"
"uint32[] ctrlMode\n"
"uint64[] errorWarningStatus\n"
"uint32[] trjStatus\n"
"uint32[] trjViaRemain\n"
"float64[] refCurrent\n"
"float64[] refPosition\n"
"float64[] refVelocity\n"
"float64[] refAcceleration\n"
"float64[] refEffort\n"
"float64[] current\n"
"float64[] position\n"
"float64[] velocity\n"
"float64[] outConvInVelocity\n"
"float64[] acceleration\n"
"float64[] outConvInAcceleration\n"
"float64[] effort\n"
"float64[] temperature\n"
"float64[] general_0\n"
"float64[] general_1\n"
"float64[] general_2\n"
"float64[] general_3\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::torobo_msgs::ToroboJointState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::torobo_msgs::ToroboJointState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.timeStamp);
      stream.next(m.hostTimeStamp);
      stream.next(m.name);
      stream.next(m.type);
      stream.next(m.comStatus);
      stream.next(m.systemMode);
      stream.next(m.ctrlMode);
      stream.next(m.errorWarningStatus);
      stream.next(m.trjStatus);
      stream.next(m.trjViaRemain);
      stream.next(m.refCurrent);
      stream.next(m.refPosition);
      stream.next(m.refVelocity);
      stream.next(m.refAcceleration);
      stream.next(m.refEffort);
      stream.next(m.current);
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.outConvInVelocity);
      stream.next(m.acceleration);
      stream.next(m.outConvInAcceleration);
      stream.next(m.effort);
      stream.next(m.temperature);
      stream.next(m.general_0);
      stream.next(m.general_1);
      stream.next(m.general_2);
      stream.next(m.general_3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ToroboJointState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::torobo_msgs::ToroboJointState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::torobo_msgs::ToroboJointState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "timeStamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.timeStamp);
    s << indent << "hostTimeStamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.hostTimeStamp);
    s << indent << "name[]" << std::endl;
    for (size_t i = 0; i < v.name.size(); ++i)
    {
      s << indent << "  name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name[i]);
    }
    s << indent << "type[]" << std::endl;
    for (size_t i = 0; i < v.type.size(); ++i)
    {
      s << indent << "  type[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.type[i]);
    }
    s << indent << "comStatus[]" << std::endl;
    for (size_t i = 0; i < v.comStatus.size(); ++i)
    {
      s << indent << "  comStatus[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.comStatus[i]);
    }
    s << indent << "systemMode[]" << std::endl;
    for (size_t i = 0; i < v.systemMode.size(); ++i)
    {
      s << indent << "  systemMode[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.systemMode[i]);
    }
    s << indent << "ctrlMode[]" << std::endl;
    for (size_t i = 0; i < v.ctrlMode.size(); ++i)
    {
      s << indent << "  ctrlMode[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.ctrlMode[i]);
    }
    s << indent << "errorWarningStatus[]" << std::endl;
    for (size_t i = 0; i < v.errorWarningStatus.size(); ++i)
    {
      s << indent << "  errorWarningStatus[" << i << "]: ";
      Printer<uint64_t>::stream(s, indent + "  ", v.errorWarningStatus[i]);
    }
    s << indent << "trjStatus[]" << std::endl;
    for (size_t i = 0; i < v.trjStatus.size(); ++i)
    {
      s << indent << "  trjStatus[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.trjStatus[i]);
    }
    s << indent << "trjViaRemain[]" << std::endl;
    for (size_t i = 0; i < v.trjViaRemain.size(); ++i)
    {
      s << indent << "  trjViaRemain[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.trjViaRemain[i]);
    }
    s << indent << "refCurrent[]" << std::endl;
    for (size_t i = 0; i < v.refCurrent.size(); ++i)
    {
      s << indent << "  refCurrent[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.refCurrent[i]);
    }
    s << indent << "refPosition[]" << std::endl;
    for (size_t i = 0; i < v.refPosition.size(); ++i)
    {
      s << indent << "  refPosition[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.refPosition[i]);
    }
    s << indent << "refVelocity[]" << std::endl;
    for (size_t i = 0; i < v.refVelocity.size(); ++i)
    {
      s << indent << "  refVelocity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.refVelocity[i]);
    }
    s << indent << "refAcceleration[]" << std::endl;
    for (size_t i = 0; i < v.refAcceleration.size(); ++i)
    {
      s << indent << "  refAcceleration[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.refAcceleration[i]);
    }
    s << indent << "refEffort[]" << std::endl;
    for (size_t i = 0; i < v.refEffort.size(); ++i)
    {
      s << indent << "  refEffort[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.refEffort[i]);
    }
    s << indent << "current[]" << std::endl;
    for (size_t i = 0; i < v.current.size(); ++i)
    {
      s << indent << "  current[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.current[i]);
    }
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "velocity[]" << std::endl;
    for (size_t i = 0; i < v.velocity.size(); ++i)
    {
      s << indent << "  velocity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.velocity[i]);
    }
    s << indent << "outConvInVelocity[]" << std::endl;
    for (size_t i = 0; i < v.outConvInVelocity.size(); ++i)
    {
      s << indent << "  outConvInVelocity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.outConvInVelocity[i]);
    }
    s << indent << "acceleration[]" << std::endl;
    for (size_t i = 0; i < v.acceleration.size(); ++i)
    {
      s << indent << "  acceleration[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.acceleration[i]);
    }
    s << indent << "outConvInAcceleration[]" << std::endl;
    for (size_t i = 0; i < v.outConvInAcceleration.size(); ++i)
    {
      s << indent << "  outConvInAcceleration[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.outConvInAcceleration[i]);
    }
    s << indent << "effort[]" << std::endl;
    for (size_t i = 0; i < v.effort.size(); ++i)
    {
      s << indent << "  effort[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.effort[i]);
    }
    s << indent << "temperature[]" << std::endl;
    for (size_t i = 0; i < v.temperature.size(); ++i)
    {
      s << indent << "  temperature[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.temperature[i]);
    }
    s << indent << "general_0[]" << std::endl;
    for (size_t i = 0; i < v.general_0.size(); ++i)
    {
      s << indent << "  general_0[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.general_0[i]);
    }
    s << indent << "general_1[]" << std::endl;
    for (size_t i = 0; i < v.general_1.size(); ++i)
    {
      s << indent << "  general_1[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.general_1[i]);
    }
    s << indent << "general_2[]" << std::endl;
    for (size_t i = 0; i < v.general_2.size(); ++i)
    {
      s << indent << "  general_2[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.general_2[i]);
    }
    s << indent << "general_3[]" << std::endl;
    for (size_t i = 0; i < v.general_3.size(); ++i)
    {
      s << indent << "  general_3[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.general_3[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TOROBO_MSGS_MESSAGE_TOROBOJOINTSTATE_H
