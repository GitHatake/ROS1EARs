// Generated by gencpp from file torobo_msgs/MoveHomePositionGoal.msg
// DO NOT EDIT!


#ifndef TOROBO_MSGS_MESSAGE_MOVEHOMEPOSITIONGOAL_H
#define TOROBO_MSGS_MESSAGE_MOVEHOMEPOSITIONGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace torobo_msgs
{
template <class ContainerAllocator>
struct MoveHomePositionGoal_
{
  typedef MoveHomePositionGoal_<ContainerAllocator> Type;

  MoveHomePositionGoal_()
    : transitionTime(0.0)  {
    }
  MoveHomePositionGoal_(const ContainerAllocator& _alloc)
    : transitionTime(0.0)  {
  (void)_alloc;
    }



   typedef double _transitionTime_type;
  _transitionTime_type transitionTime;





  typedef boost::shared_ptr< ::torobo_msgs::MoveHomePositionGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::torobo_msgs::MoveHomePositionGoal_<ContainerAllocator> const> ConstPtr;

}; // struct MoveHomePositionGoal_

typedef ::torobo_msgs::MoveHomePositionGoal_<std::allocator<void> > MoveHomePositionGoal;

typedef boost::shared_ptr< ::torobo_msgs::MoveHomePositionGoal > MoveHomePositionGoalPtr;
typedef boost::shared_ptr< ::torobo_msgs::MoveHomePositionGoal const> MoveHomePositionGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::torobo_msgs::MoveHomePositionGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::torobo_msgs::MoveHomePositionGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::torobo_msgs::MoveHomePositionGoal_<ContainerAllocator1> & lhs, const ::torobo_msgs::MoveHomePositionGoal_<ContainerAllocator2> & rhs)
{
  return lhs.transitionTime == rhs.transitionTime;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::torobo_msgs::MoveHomePositionGoal_<ContainerAllocator1> & lhs, const ::torobo_msgs::MoveHomePositionGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace torobo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::torobo_msgs::MoveHomePositionGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::torobo_msgs::MoveHomePositionGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::torobo_msgs::MoveHomePositionGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::torobo_msgs::MoveHomePositionGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::torobo_msgs::MoveHomePositionGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::torobo_msgs::MoveHomePositionGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::torobo_msgs::MoveHomePositionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "71fd40116858649790e007be0d81d186";
  }

  static const char* value(const ::torobo_msgs::MoveHomePositionGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x71fd401168586497ULL;
  static const uint64_t static_value2 = 0x90e007be0d81d186ULL;
};

template<class ContainerAllocator>
struct DataType< ::torobo_msgs::MoveHomePositionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "torobo_msgs/MoveHomePositionGoal";
  }

  static const char* value(const ::torobo_msgs::MoveHomePositionGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::torobo_msgs::MoveHomePositionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Goal\n"
"float64 transitionTime\n"
;
  }

  static const char* value(const ::torobo_msgs::MoveHomePositionGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::torobo_msgs::MoveHomePositionGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.transitionTime);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveHomePositionGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::torobo_msgs::MoveHomePositionGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::torobo_msgs::MoveHomePositionGoal_<ContainerAllocator>& v)
  {
    s << indent << "transitionTime: ";
    Printer<double>::stream(s, indent + "  ", v.transitionTime);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TOROBO_MSGS_MESSAGE_MOVEHOMEPOSITIONGOAL_H
